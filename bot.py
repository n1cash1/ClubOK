import logging
import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import asyncio
import datetime
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not API_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

try:
    ADMINS = list(map(int, os.getenv('TELEGRAM_ADMINS', '').split(','))) if os.getenv('TELEGRAM_ADMINS') else []
    if not ADMINS:
        logger.warning("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
except ValueError:
    logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ TELEGRAM_ADMINS")
    ADMINS = []

DONATE_URL = os.getenv('DONATE_URL', 'https://example.com/donate')


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data() -> Dict[str, Any]:
    default_data = {
        'bookings': {},
        'tables': {'available': 10, 'total': 10},
        'reviews': {}
    }

    try:
        if not os.path.exists('data.json'):
            logger.warning("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
            save_data(default_data)
            return default_data

        with open('data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if not all(key in data for key in ['bookings', 'tables', 'reviews']):
                logger.warning("–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
                for key in default_data:
                    if key not in data:
                        data[key] = default_data[key]
                save_data(data)

            return data

    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")
        save_data(default_data)
        return default_data
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return default_data


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data: Dict[str, Any]):
    try:
        with open('data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
data = load_data()
bookings_db = data['bookings']
tables_db = data['tables']
reviews_db = data['reviews']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class BookingStates(StatesGroup):
    waiting_for_booking_type = State()
    waiting_for_cottage_date = State()
    waiting_for_cottage_guests = State()
    waiting_for_table_date = State()
    waiting_for_table_guests = State()
    waiting_for_contact = State()
    waiting_for_admin_comment = State()
    waiting_for_tables_count = State()
    waiting_for_review_rating = State()
    waiting_for_review_text = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç—Ç–µ–¥–∂")],
            [KeyboardButton(text="üçæ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")],
            [KeyboardButton(text="üí∏ –û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ")],
            [KeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_admin_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤")],
            [KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )
    return keyboard


def get_review_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚≠êÔ∏è 1"), KeyboardButton(text="‚≠êÔ∏è 2")],
            [KeyboardButton(text="‚≠êÔ∏è 3"), KeyboardButton(text="‚≠êÔ∏è 4")],
            [KeyboardButton(text="‚≠êÔ∏è 5"), KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_check_middleware(handler, event, data):
    if hasattr(event, 'from_user') and event.from_user.id not in ADMINS:
        if isinstance(event, types.CallbackQuery):
            await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    return await handler(event, data)


dp.callback_query.middleware(admin_check_middleware)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_date_available(booking_type: str, date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if booking_type == 'table':
        return tables_db['available'] > 0

    # –î–ª—è –∫–æ—Ç—Ç–µ–¥–∂–µ–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
    booked_dates = [b['date'] for b in bookings_db.values()
                   if b['type'] == 'cottage' and b['status'] == 'confirmed']
    return date not in booked_dates


async def notify_admins(message: str, booking_id: Optional[str] = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMINS:
        try:
            keyboard = None
            if booking_id:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{booking_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{booking_id}")]
                ])

            await bot.send_message(admin_id, message, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        if message.from_user.id in ADMINS:
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ClubOK!", reply_markup=get_admin_menu())
        else:
            await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClubOK!", reply_markup=get_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "üí∏ –û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ")
async def donate_handler(message: types.Message):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=DONATE_URL)]
        ])
        await message.answer("üíå –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å!", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ donate_handler: {e}")


# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ç—Ç–µ–¥–∂–∞
@dp.message(F.text == "üè† –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç—Ç–µ–¥–∂")
async def book_cottage_start(message: types.Message, state: FSMContext):
    try:
        await state.set_state(BookingStates.waiting_for_cottage_date)
        await message.answer("üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç—Ç–µ–¥–∂? (–î–î.–ú–ú.–ì–ì–ì–ì)",
                           reply_markup=get_cancel_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ book_cottage_start: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_cottage_date)
async def process_cottage_date(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
            return

        try:
            booking_date = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return

        today = datetime.date.today()

        if booking_date < today:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç—Ç–µ–¥–∂ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        if (booking_date - today).days > 365:
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
            return

        if not is_date_available('cottage', message.text):
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ—Ç—Ç–µ–¥–∂ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
            return

        await state.update_data(booking_date=message.text)
        await state.set_state(BookingStates.waiting_for_cottage_guests)
        await message.answer("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:", reply_markup=get_cancel_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_cottage_date: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_cottage_guests)
async def process_cottage_guests(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
            return

        if not message.text.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=get_cancel_keyboard())
            return

        guests = int(message.text)
        if guests < 1 or guests > 20:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
                               reply_markup=get_cancel_keyboard())
            return

        await state.update_data(guests=guests, booking_type="cottage")
        await state.set_state(BookingStates.waiting_for_contact)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                [KeyboardButton(text="üìû –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")],
                [KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )

        await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                           reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_cottage_guests: {e}")
        await state.clear()


# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞
@dp.message(F.text == "üçæ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")
async def book_table_start(message: types.Message, state: FSMContext):
    try:
        if tables_db['available'] <= 0:
            await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤.")
            return

        await state.set_state(BookingStates.waiting_for_table_date)
        await message.answer("üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫? (–î–î.–ú–ú.–ì–ì–ì–ì)",
                           reply_markup=get_cancel_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ book_table_start: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_table_date)
async def process_table_date(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
            return

        try:
            booking_date = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            return

        today = datetime.date.today()

        if booking_date < today:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return

        if (booking_date - today).days > 365:
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
            return

        await state.update_data(booking_date=message.text)
        await state.set_state(BookingStates.waiting_for_table_guests)
        await message.answer("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:", reply_markup=get_cancel_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_table_date: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_table_guests)
async def process_table_guests(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
            return

        if not message.text.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:", reply_markup=get_cancel_keyboard())
            return

        guests = int(message.text)
        if guests < 1 or guests > 10:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –∑–∞ 1 —Å—Ç–æ–ª –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
                               reply_markup=get_cancel_keyboard())
            return

        await state.update_data(guests=guests, booking_type="table")
        await state.set_state(BookingStates.waiting_for_contact)

        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                [KeyboardButton(text="üìû –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")],
                [KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )

        await message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
                           reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_table_guests: {e}")
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(BookingStates.waiting_for_contact, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    try:
        contact = message.contact
        await _save_booking(message, state, contact.phone_number)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_contact)
async def process_contact_manual(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
            return

        if message.text == "üìû –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é":
            await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:",
                               reply_markup=get_cancel_keyboard())
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = ''.join(filter(str.isdigit, message.text))
        if len(phone) < 11:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:")
            return

        await _save_booking(message, state, phone)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_contact_manual: {e}")
        await state.clear()


async def _save_booking(message: types.Message, state: FSMContext, phone: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    existing_booking = next((b for b in bookings_db.values()
                           if b['user_id'] == message.from_user.id
                           and b['date'] == user_data['booking_date']
                           and b['type'] == user_data['booking_type']
                           and b['status'] == 'pending'), None)
    if existing_booking:
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        await state.clear()
        return

    booking_id = str(datetime.datetime.now().timestamp()).replace('.', '')[-8:]
    booking_details = {
        'id': booking_id,
        'type': user_data['booking_type'],
        'date': user_data['booking_date'],
        'guests': user_data['guests'],
        'user_id': message.from_user.id,
        'user_name': message.from_user.full_name,
        'phone': phone,
        'status': 'pending',
        'created_at': datetime.datetime.now().isoformat()
    }

    bookings_db[booking_id] = booking_details
    save_data({'bookings': bookings_db, 'tables': tables_db, 'reviews': reviews_db})

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await notify_admins(
        f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        f"üîπ –¢–∏–ø: {'–ö–æ—Ç—Ç–µ–¥–∂' if booking_details['type'] == 'cottage' else '–°—Ç–æ–ª–∏–∫'}\n"
        f"üîπ –î–∞—Ç–∞: {booking_details['date']}\n"
        f"üîπ –ì–æ—Å—Ç–µ–π: {booking_details['guests']}\n"
        f"üîπ –ö–ª–∏–µ–Ω—Ç: {booking_details['user_name']}\n"
        f"üîπ –¢–µ–ª–µ—Ñ–æ–Ω: {booking_details['phone']}\n\n"
        f"ID –±—Ä–æ–Ω–∏: {booking_id}",
        booking_id
    )

    await state.clear()
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                       reply_markup=get_main_menu())


# –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤
@dp.message(F.text == "‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_review(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        has_confirmed_bookings = any(
            b['user_id'] == message.from_user.id and b['status'] == 'confirmed'
            for b in bookings_db.values()
        )

        if not has_confirmed_bookings:
            await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.")
            return

        await state.set_state(BookingStates.waiting_for_review_rating)
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –≤–∏–∑–∏—Ç –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:", reply_markup=get_review_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_review: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_review_rating, F.text.regexp(r'‚≠êÔ∏è [1-5]'))
async def process_review_rating(message: types.Message, state: FSMContext):
    try:
        rating = int(message.text.split()[1])
        await state.update_data(rating=rating)
        await state.set_state(BookingStates.waiting_for_review_text)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                           reply_markup=get_cancel_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_review_rating: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_review_text)
async def process_review_text(message: types.Message, state: FSMContext):
    try:
        if message.text == "üîô –û—Ç–º–µ–Ω–∏—Ç—å":
            await state.clear()
            await message.answer("‚ùå –û—Ç–∑—ã–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", reply_markup=get_main_menu())
            return

        user_data = await state.get_data()
        review_id = str(datetime.datetime.now().timestamp()).replace('.', '')[-8:]

        reviews_db[review_id] = {
            'user_id': message.from_user.id,
            'user_name': message.from_user.full_name,
            'rating': user_data['rating'],
            'text': message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "",
            'date': datetime.datetime.now().isoformat()
        }

        save_data({'bookings': bookings_db, 'tables': tables_db, 'reviews': reviews_db})

        await state.clear()
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=get_main_menu())

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
        review_text = f"‚≠êÔ∏è –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n–û—Ü–µ–Ω–∫–∞: {user_data['rating']}/5"
        if reviews_db[review_id]['text']:
            review_text += f"\n–û—Ç–∑—ã–≤: {reviews_db[review_id]['text']}"

        await notify_admins(review_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_review_text: {e}")
        await state.clear()


# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    try:
        if message.from_user.id not in ADMINS:
            return

        pending = sum(1 for b in bookings_db.values() if b['status'] == 'pending')
        confirmed = sum(1 for b in bookings_db.values() if b['status'] == 'confirmed')
        rejected = sum(1 for b in bookings_db.values() if b['status'] == 'rejected')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
        if reviews_db:
            avg_rating = sum(r['rating'] for r in reviews_db.values()) / len(reviews_db)
            reviews_count = len(reviews_db)
        else:
            avg_rating = 0
            reviews_count = 0

        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üìå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {pending}\n"
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {confirmed}\n"
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {rejected}\n\n"
            f"üçæ –°—Ç–æ–ª–∏–∫–∏:\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {tables_db['available']}/{tables_db['total']}\n\n"
            f"‚≠êÔ∏è –û—Ç–∑—ã–≤—ã:\n"
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5\n"
            f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats: {e}")


@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
async def list_bookings(message: types.Message):
    try:
        if message.from_user.id not in ADMINS:
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for booking in sorted(bookings_db.values(),
                            key=lambda x: x['created_at'],
                            reverse=True)[:10]:
            status_icon = "üü°" if booking['status'] == 'pending' else "üü¢" if booking['status'] == 'confirmed' else "üî¥"
            btn_text = f"{status_icon} {'–ö–æ—Ç—Ç–µ–¥–∂' if booking['type'] == 'cottage' else '–°—Ç–æ–ª–∏–∫'} –Ω–∞ {booking['date']}"
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=btn_text, callback_data=f"info_{booking['id']}")]
            )

        await message.answer("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_bookings: {e}")


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def cancel_booking_start(message: types.Message):
    try:
        if message.from_user.id not in ADMINS:
            return

        active_bookings = [b for b in bookings_db.values() if b['status'] == 'confirmed']
        if not active_bookings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for booking in sorted(active_bookings,
                            key=lambda x: x['created_at'],
                            reverse=True)[:10]:
            btn_text = f"{'–ö–æ—Ç—Ç–µ–¥–∂' if booking['type'] == 'cottage' else '–°—Ç–æ–ª–∏–∫'} –Ω–∞ {booking['date']} ({booking['guests']} —á–µ–ª.)"
            keyboard.inline_keyboard.append(
                [InlineKeyboardButton(text=btn_text, callback_data=f"cancel_{booking['id']}")]
            )

        await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_booking_start: {e}")


@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤")
async def change_tables_start(message: types.Message, state: FSMContext):
    try:
        if message.from_user.id not in ADMINS:
            return

        await state.set_state(BookingStates.waiting_for_tables_count)
        await message.answer(f"‚úèÔ∏è –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤: {tables_db['total']}\n"
                           f"–î–æ—Å—Ç—É–ø–Ω–æ: {tables_db['available']}\n\n"
                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ change_tables_start: {e}")
        await state.clear()


@dp.message(BookingStates.waiting_for_tables_count)
async def process_tables_count(message: types.Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return

        new_count = int(message.text)
        if new_count < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–µ–Ω—å—à–µ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤
        booked_tables = tables_db['total'] - tables_db['available']
        if new_count < booked_tables:
            await message.answer(f"‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—å—à–µ {booked_tables} —Å—Ç–æ–ª–∏–∫–æ–≤ (—É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ).")
            return

        old_count = tables_db['total']
        tables_db['total'] = new_count
        tables_db['available'] = new_count - booked_tables
        save_data({'bookings': bookings_db, 'tables': tables_db, 'reviews': reviews_db})

        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ {tables_db['available']}/{tables_db['total']}",
            reply_markup=get_admin_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_tables_count: {e}")
        await state.clear()


# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data.startswith('confirm_'))
async def process_confirm(callback: types.CallbackQuery):
    try:
        booking_id = callback.data.split('_')[1]
        booking = bookings_db.get(booking_id)

        if not booking:
            await callback.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        if booking['status'] != 'pending':
            await callback.answer("‚ÑπÔ∏è –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return

        if booking['type'] == 'table' and tables_db['available'] <= 0:
            await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤!")
            return

        booking['status'] = 'confirmed'
        if booking['type'] == 'table':
            tables_db['available'] -= 1
        save_data({'bookings': bookings_db, 'tables': tables_db, 'reviews': reviews_db})

        await callback.message.edit_text(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n" + callback.message.text.split('\n\n')[1]
        )

        try:
            await bot.send_message(
                booking['user_id'],
                f"üéâ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
                f"üîπ –¢–∏–ø: {'–ö–æ—Ç—Ç–µ–¥–∂' if booking['type'] == 'cottage' else '–°—Ç–æ–ª–∏–∫'}\n"
                f"üîπ –î–∞—Ç–∞: {booking['date']}\n"
                f"üîπ –ì–æ—Å—Ç–µ–π: {booking['guests']}\n\n"
                f"–ñ–¥–µ–º –≤–∞—Å –≤ ClubOK!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking['user_id']}: {e}")

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_confirm: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data.startswith('reject_'))
async def process_reject(callback: types.CallbackQuery, state: FSMContext):
    try:
        booking_id = callback.data.split('_')[1]
        booking = bookings_db.get(booking_id)

        if not booking:
            await callback.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        if booking['status'] != 'pending':
            await callback.answer("‚ÑπÔ∏è –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
            return

        booking['status'] = 'rejected'
        save_data({'bookings': bookings_db, 'tables': tables_db, 'reviews': reviews_db})

        await callback.message.edit_text(
            f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {booking_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!\n\n" + callback.message.text.split('\n\n')[1]
        )

        await state.set_state(BookingStates.waiting_for_admin_comment)
        await state.update_data(booking_id=booking_id)

        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç):")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_reject: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data.startswith('cancel_'))
async def process_cancel(callback: types.CallbackQuery, state: FSMContext):
    try:
        booking_id = callback.data.split('_')[1]
        booking = bookings_db.get(booking_id)

        if not booking:
            await callback.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        if booking['status'] != 'confirmed':
            await callback.answer("‚ÑπÔ∏è –≠—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
            return

        await state.set_state(BookingStates.waiting_for_admin_comment)
        await state.update_data(booking_id=booking_id)
        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç):")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_cancel: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.callback_query(F.data.startswith('info_'))
async def show_booking_info(callback: types.CallbackQuery):
    try:
        booking_id = callback.data.split('_')[1]
        booking = bookings_db.get(booking_id)

        if not booking:
            await callback.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        status_map = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
        }

        await callback.message.answer(
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n\n"
            f"üîπ ID: {booking['id']}\n"
            f"üîπ –¢–∏–ø: {'–ö–æ—Ç—Ç–µ–¥–∂' if booking['type'] == 'cottage' else '–°—Ç–æ–ª–∏–∫'}\n"
            f"üîπ –î–∞—Ç–∞: {booking['date']}\n"
            f"üîπ –ì–æ—Å—Ç–µ–π: {booking['guests']}\n"
            f"üîπ –ö–ª–∏–µ–Ω—Ç: {booking['user_name']}\n"
            f"üîπ –¢–µ–ª–µ—Ñ–æ–Ω: {booking['phone']}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {status_map.get(booking['status'], booking['status'])}\n"
            f"üîπ –°–æ–∑–¥–∞–Ω–æ: {datetime.datetime.fromisoformat(booking['created_at']).strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_booking_info: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@dp.message(BookingStates.waiting_for_admin_comment)
async def process_admin_comment(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        booking_id = user_data['booking_id']
        booking = bookings_db.get(booking_id)

        if booking:
            if booking['status'] != 'rejected':
                if booking['type'] == 'table':
                    tables_db['available'] += 1
                booking['status'] = 'rejected'
                save_data({'bookings': bookings_db, 'tables': tables_db, 'reviews': reviews_db})

            try:
                await bot.send_message(
                    booking['user_id'],
                    f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n"
                    f"üîπ –¢–∏–ø: {'–ö–æ—Ç—Ç–µ–¥–∂' if booking['type'] == 'cottage' else '–°—Ç–æ–ª–∏–∫'}\n"
                    f"üîπ –î–∞—Ç–∞: {booking['date']}\n"
                    f"üîπ –ì–æ—Å—Ç–µ–π: {booking['guests']}\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking['user_id']}: {e}")

            await message.answer(
                f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                f"ID: {booking_id}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}",
                reply_markup=get_admin_menu()
            )
        else:
            await message.answer("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=get_admin_menu())

        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_admin_comment: {e}")
        await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.session.close()
        logger.info("Bot stopped")


if __name__ == '__main__':
    asyncio.run(main())